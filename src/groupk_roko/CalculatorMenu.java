/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package groupk_roko;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/**
 *
 * @author rokom
 */
public class CalculatorMenu extends javax.swing.JFrame {

    /**
     * Creates new form CalculatorMenu
     */
    private CalculatorEditor calcEditorMenu;
    private Cost count = new Cost();
    private ArrayList <Cost> calcList = new ArrayList <Cost>();
    private int navigatorIndex = 0; // tracks which array list element is currently selected
    private boolean loadPerformed = false;  // tracks if the data file has been loaded
    private int fileObjectCount = 0;    // records the loaded file's length
    public CalculatorMenu() {
        initComponents();
        // prints true if the array list is empty
        System.out.println(calcList.isEmpty());
        if (new File("budget.data").exists()) {
            loadBTN.setEnabled(true);
        }
    }
    
    public void setCalcEditorMenu(CalculatorEditor menu){
        calcEditorMenu = menu;
    }
    
    public javax.swing.JRadioButton getSubsidyRB() {
        return subsidyRB;
    }
    
    public javax.swing.JRadioButton getCampaignRB() {
        return campaignRB;
    }
    
    public javax.swing.JRadioButton getProgrammeRB() {
        return programmeRB;
    }
    
    public javax.swing.JTextArea getDisplayTA() {
        return displayTA;
    }
    
    public javax.swing.JButton getPreviousBTN() {
        return previousBTN;
    }
    
    public javax.swing.JButton getNextBTN() {
        return nextBTN;
    }
    
    public javax.swing.JButton getEditBTN() {
        return editBTN;
    }
    
    public javax.swing.JButton getDeleteBTN() {
        return deleteBTN;
    }
    
    public javax.swing.JButton getSaveBTN() {
        return saveBTN;
    }
    
    public javax.swing.JLabel getCountLBL() {
        return countLBL;
    }
    
    public ArrayList <Cost> getCalcList() {
        return calcList;
    }
    
    public Cost getCount() {
        return count;
    }
    
    public int getNavigatorIndex() {
        return navigatorIndex;
    }
    
    public void setNavigatorIndex(int index) {
        navigatorIndex = index;
    }
    
    public int getFileObjectCount() {
        return fileObjectCount;
    }
    
    public boolean getLoadPerformed() {
        return loadPerformed;
    }
    
    public void updateSearchCB(String template, javax.swing.JComboBox cBox) {
        cBox.removeAllItems();
        cBox.addItem("Name");
        cBox.addItem("Date");
        cBox.addItem("Goal");
        cBox.addItem("Amount");
        if (template.equals("Subsidy")) {    
            cBox.addItem("Beneficiary");
            cBox.addItem("Lump Sum (True/False)");
        }
        else if (template.equals("Campaign")) {
            cBox.addItem("Manager");
            cBox.addItem("End Date");
        }
        else if (template.equals("Programme")) {
            cBox.addItem("Department");
            cBox.addItem("Recurrent (True/False)");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        costBGR = new javax.swing.ButtonGroup();
        backBTN = new javax.swing.JButton();
        menuLBL = new javax.swing.JLabel();
        addBTN = new javax.swing.JButton();
        editBTN = new javax.swing.JButton();
        calculateBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTA = new javax.swing.JTextArea();
        previousBTN = new javax.swing.JButton();
        nextBTN = new javax.swing.JButton();
        subsidyRB = new javax.swing.JRadioButton();
        campaignRB = new javax.swing.JRadioButton();
        programmeRB = new javax.swing.JRadioButton();
        deleteBTN = new javax.swing.JButton();
        searchBTN = new javax.swing.JButton();
        saveBTN = new javax.swing.JButton();
        loadBTN = new javax.swing.JButton();
        countLBL = new javax.swing.JLabel();
        searchTF = new javax.swing.JTextField();
        searchCB = new javax.swing.JComboBox<>();
        searchLBL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBTN.setText("Back");
        backBTN.setEnabled(false);
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });

        menuLBL.setText("Budget Calculator");

        addBTN.setText("Add Record");
        addBTN.setEnabled(false);
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        editBTN.setText("Edit Record");
        editBTN.setEnabled(false);
        editBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBTNActionPerformed(evt);
            }
        });

        calculateBTN.setText("Calculate");
        calculateBTN.setEnabled(false);

        displayTA.setEditable(false);
        displayTA.setColumns(20);
        displayTA.setRows(5);
        jScrollPane1.setViewportView(displayTA);

        previousBTN.setText("Previous");
        previousBTN.setEnabled(false);
        previousBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBTNActionPerformed(evt);
            }
        });

        nextBTN.setText("Next");
        nextBTN.setEnabled(false);
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });

        costBGR.add(subsidyRB);
        subsidyRB.setText("Subsidy");
        subsidyRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subsidyRBActionPerformed(evt);
            }
        });

        costBGR.add(campaignRB);
        campaignRB.setText("Campaign");
        campaignRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campaignRBActionPerformed(evt);
            }
        });

        costBGR.add(programmeRB);
        programmeRB.setText("Programme");
        programmeRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programmeRBActionPerformed(evt);
            }
        });

        deleteBTN.setText("Delete");
        deleteBTN.setEnabled(false);
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        searchBTN.setText("Search");
        searchBTN.setEnabled(false);

        saveBTN.setText("Save");
        saveBTN.setEnabled(false);
        saveBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBTNActionPerformed(evt);
            }
        });

        loadBTN.setText("Load");
        loadBTN.setEnabled(false);
        loadBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBTNActionPerformed(evt);
            }
        });

        countLBL.setText("N/A");

        searchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTFKeyReleased(evt);
            }
        });

        searchCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Date", "Goal", "Amount" }));
        searchCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCBActionPerformed(evt);
            }
        });

        searchLBL.setText("Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(backBTN)
                        .addComponent(editBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(calculateBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(saveBTN, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadBTN, javax.swing.GroupLayout.Alignment.LEADING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campaignRB, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(programmeRB, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subsidyRB, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addComponent(searchBTN))
                            .addComponent(deleteBTN)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(previousBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(countLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nextBTN)))
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(menuLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCB, 0, 142, Short.MAX_VALUE)
                            .addComponent(searchTF))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(menuLBL)
                        .addGap(34, 34, 34)
                        .addComponent(addBTN)
                        .addGap(18, 18, 18)
                        .addComponent(editBTN)
                        .addGap(18, 18, 18)
                        .addComponent(calculateBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(searchLBL)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(previousBTN)
                            .addComponent(nextBTN)
                            .addComponent(saveBTN)
                            .addComponent(countLBL))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteBTN)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(subsidyRB)
                                .addComponent(loadBTN)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campaignRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(programmeRB))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(searchBTN))))
                    .addComponent(backBTN))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBTNActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_backBTNActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // TODO add your handling code here:
        calcEditorMenu.setCurrentOperation("add");
        calcEditorMenu.getIdTF().setText(String.valueOf(count.getCurrentId()));
        this.setVisible(false);
        calcEditorMenu.setVisible(true);
    }//GEN-LAST:event_addBTNActionPerformed

    private void editBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBTNActionPerformed
        // TODO add your handling code here:
        calcEditorMenu.setCurrentOperation("edit");
        // load the currently selected record
        this.setVisible(false);
        calcEditorMenu.getIdTF().setText(String.valueOf(navigatorIndex));
        calcEditorMenu.getNameTF().setText(calcList.get(navigatorIndex).getName());
        calcEditorMenu.getDateTF().setText(calcList.get(navigatorIndex).getDate());
        calcEditorMenu.getGoalTF().setText(calcList.get(navigatorIndex).getGoal());
        calcEditorMenu.getAmountTF().setText(String.valueOf(calcList.get(navigatorIndex).getAmount()));
        if (calcList.get(navigatorIndex) instanceof Subsidy)
        {
            calcEditorMenu.getDerived1TF().setText(((Subsidy) calcList.get(navigatorIndex)).getBeneficiary());
            calcEditorMenu.getDerived2TF().setText(String.valueOf(((Subsidy) calcList.get(navigatorIndex)).isIsLumpSum()));
        }
        else if (calcList.get(navigatorIndex) instanceof Campaign)
        {
            calcEditorMenu.getDerived1TF().setText(((Campaign) calcList.get(navigatorIndex)).getManager());
            calcEditorMenu.getDerived2TF().setText(((Campaign) calcList.get(navigatorIndex)).getEndDate());
        }
        else if (calcList.get(navigatorIndex) instanceof Programme)
        {
            calcEditorMenu.getDerived1TF().setText(((Programme) calcList.get(navigatorIndex)).getDepartment());
            calcEditorMenu.getDerived2TF().setText(String.valueOf(((Programme) calcList.get(navigatorIndex)).isIsRecurrent()));
        }
        calcEditorMenu.setVisible(true);
    }//GEN-LAST:event_editBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
        // delete object at navigatorIndex 
        calcList.remove(navigatorIndex);
        navigatorIndex = 0;
        displayTA.setText("SELECTED RECORD HAS BEEN DELETED.\n\n");
        if (!calcList.isEmpty())
            displayTA.append(calcList.get(navigatorIndex).printDetails());
        
        // disable buttons if the array list is empty
        if (calcList.isEmpty()) {
            editBTN.setEnabled(false);
            previousBTN.setEnabled(false);
            nextBTN.setEnabled(false);
            deleteBTN.setEnabled(false);
            searchBTN.setEnabled(false);
            calculateBTN.setEnabled(false);
            saveBTN.setEnabled(false);
            navigatorIndex = -1;           
        }
        else if (calcList.size() == 1) { // disable navigation if there is only one element
            previousBTN.setEnabled(false);
            nextBTN.setEnabled(false);
        }
        countLBL.setText(navigatorIndex + 1 + " / " + calcList.size());
        // enable button if changes have been made
        if (fileObjectCount != calcList.size())
        {
            saveBTN.setEnabled(true);
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void subsidyRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subsidyRBActionPerformed
        // Enable add button once a radio button has been clicked
        addBTN.setEnabled(true);
        calcEditorMenu.getDerived1LBL().setText("Beneficiary");
        calcEditorMenu.getDerived2LBL().setText("Lump Sum (Y/N)");
        updateSearchCB("Subsidy", searchCB);
    }//GEN-LAST:event_subsidyRBActionPerformed

    private void campaignRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campaignRBActionPerformed
        // Enable add button once a radio button has been clicked
        addBTN.setEnabled(true);
        calcEditorMenu.getDerived1LBL().setText("Manager");
        calcEditorMenu.getDerived2LBL().setText("End Date");
        updateSearchCB("Campaign", searchCB);
    }//GEN-LAST:event_campaignRBActionPerformed

    private void programmeRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programmeRBActionPerformed
        // Enable add button once a radio button has been clicked
        addBTN.setEnabled(true);
        calcEditorMenu.getDerived1LBL().setText("Department");
        calcEditorMenu.getDerived2LBL().setText("Recurrent (Y/N)");
        updateSearchCB("Programme", searchCB);
    }//GEN-LAST:event_programmeRBActionPerformed

    private void previousBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBTNActionPerformed
        // TODO add your handling code here:
        if (navigatorIndex > 0) {
            navigatorIndex--;
            System.out.println(navigatorIndex);
            displayTA.setText(calcList.get(navigatorIndex).printDetails());
            countLBL.setText(navigatorIndex + 1 + " / " + calcList.size());
        }
    }//GEN-LAST:event_previousBTNActionPerformed

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        // TODO add your handling code here:
        if (navigatorIndex + 1 < calcList.size() ) {
            navigatorIndex++;
            System.out.println(navigatorIndex);
            displayTA.setText(calcList.get(navigatorIndex).printDetails());
            countLBL.setText(navigatorIndex + 1 + " / " + calcList.size());
        }
    }//GEN-LAST:event_nextBTNActionPerformed

    private void saveBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBTNActionPerformed
        // TODO add your handling code here:
        // scenario 1: file already exists and it has not been loaded yet
        if (new File("budget.data").exists() && !loadPerformed) {
                // instantiate appendable object output stream and write to file
            try {
                FileOutputStream fileOut = new FileOutputStream("budget.data", true);
                AppendableObjectOutputStream aOut = new AppendableObjectOutputStream(fileOut);
                displayTA.setText("");
                for (Cost iterator : calcList) {
                    aOut.writeObject(iterator);
                    displayTA.append("Writing " + iterator.getName() + " to file...\n");
                }
                displayTA.append("Write operation SUCCESSFUL! Click Load to retrieve all data.");
                aOut.close();
                fileOut.close();
                // clear records
                saveBTN.setEnabled(false);
                calcList.clear();
                navigatorIndex = 0;
                countLBL.setText("N/A");
            }
            catch (FileNotFoundException e) {
                System.out.println(e);
            }
            catch (IOException f) {
                System.out.println(f);
            }
        }
        // scenario 2: file does not exist or an overwrite is due
        else {
            try {
                // create new file and write objects
                FileOutputStream fileOut = new FileOutputStream("budget.data");
                ObjectOutputStream out = new ObjectOutputStream(fileOut);
                displayTA.setText("");
                for (Cost iterator : calcList) {
                    out.writeObject(iterator);
                    displayTA.append("Writing " + iterator.getName() + " to file...\n");
                }
                displayTA.append("Write operation SUCCESSFUL!");
                out.close();
                fileOut.close();
                loadPerformed = false;
                saveBTN.setEnabled(false);
            }
            catch (FileNotFoundException e) {
                System.out.println(e);
            }
            catch (IOException f) {
                System.out.println(f);
            }          
        }
    }//GEN-LAST:event_saveBTNActionPerformed

    private void loadBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBTNActionPerformed
        // TODO add your handling code here:
        ArrayList <Cost> tempList = new ArrayList <Cost>();
        displayTA.setText("");
        navigatorIndex = 0;
        try {
            FileInputStream fileIn = new FileInputStream("budget.data");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            while (fileIn.available() > 0) {
                try {
                    Cost tempCost = (Cost) in.readObject(); 
                    tempList.add(tempCost);
                    fileObjectCount++;
                }
                catch (ClassNotFoundException e) {
                    System.out.println(e);
                }
            } 
            calcList = tempList;
            displayTA.setText(calcList.getLast().printDetails() + 
                    "\n Load operation SUCCESSFUL!");
            loadPerformed = true;
            saveBTN.setEnabled(false);
            countLBL.setText(navigatorIndex + 1 + " / " + calcList.size());
            // enable buttons
            if (calcList.size() == 1) {// disable navigation if there is only one element
                editBTN.setEnabled(true);
                previousBTN.setEnabled(false);
                nextBTN.setEnabled(false);
                deleteBTN.setEnabled(true);
                searchBTN.setEnabled(true);
                calculateBTN.setEnabled(true);
            }
            else if (calcList.size() > 1) { 
                previousBTN.setEnabled(true);
                nextBTN.setEnabled(true);
                editBTN.setEnabled(true);
                deleteBTN.setEnabled(true);
                searchBTN.setEnabled(true);
                calculateBTN.setEnabled(true);
            }
        }
        catch (FileNotFoundException e) {
            System.out.println(e);
        }
        catch (IOException f) {
            System.out.println(f);
        }
    }//GEN-LAST:event_loadBTNActionPerformed

    private void searchCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchCBActionPerformed

    private void searchTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTFKeyReleased
        // TODO add your handling code here:
                int potentialMatches = 0;
        int index = 0;
        displayTA.setText("");
        if (searchCB.getSelectedItem().equals("Name"))
        {
            System.out.println("Searching by name...");
            for (Cost searchCost : calcList) {
                if (searchCost.getName().toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " Name: " + searchCost.getName() +"\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Date"))
        { 
            System.out.println("Searching by date...");
            for (Cost searchCost : calcList) {
                if (searchCost.getDate().toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Date: " + searchCost.getDate() +"\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Goal"))
        {
            System.out.println("Searching by goal...");
            for (Cost searchCost : calcList) {
                if (searchCost.getGoal().toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Goal: " + searchCost.getGoal() +"\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Amount"))
        {
            System.out.println("Searching by amount...");
            for (Cost searchCost : calcList) {
                if (String.valueOf(searchCost.getAmount()).toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Amount: " + searchCost.getAmount() +"\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Beneficiary"))
        {
            System.out.println("Searching by beneficiary...");
            for (Cost searchCost : calcList) {
                if ((((Subsidy)searchCost).getBeneficiary()).toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Beneficiary: " + (((Subsidy)searchCost).getBeneficiary()) + "\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Lump Sum (True/False)"))
        {
            System.out.println("Searching by lump sum...");
            for (Cost searchCost : calcList) {
                if (String.valueOf(((Subsidy)searchCost).isIsLumpSum()).toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Lump Sum: " + (((Subsidy)searchCost).isIsLumpSum()) + "\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Manager"))
        {
            System.out.println("Searching by manager...");
            for (Cost searchCost : calcList) {
                if (((Campaign)searchCost).getManager().toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Manager: " + (((Campaign)searchCost).getManager()) + "\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("End Date"))
        {
            System.out.println("Searching by end date...");
            for (Cost searchCost : calcList) {
                if (((Campaign)searchCost).getEndDate().toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " End Date: " + (((Campaign)searchCost).getEndDate()) + "\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Department"))
        {
            System.out.println("Searching by department...");
            for (Cost searchCost : calcList) {
                if (((Programme)searchCost).getDepartment().toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Department: " + (((Programme)searchCost).getDepartment()) + "\n");
                }
                index++;
            }
        }
        else if (searchCB.getSelectedItem().equals("Recurrent (True/False"))
        {
            System.out.println("Searching by recurrency...");
            for (Cost searchCost : calcList) {
                if (String.valueOf(((Programme)searchCost).isIsRecurrent()).toLowerCase().contains(searchTF.getText().toLowerCase())) {
                    potentialMatches++;
                    displayTA.append(index + " " + searchCost.getName() + " Recurrent: " + (((Programme)searchCost).getDepartment()) + "\n");
                }
                index++;
            }
        }
        displayTA.append(potentialMatches + " potential match(es) found.");
    }//GEN-LAST:event_searchTFKeyReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JButton backBTN;
    private javax.swing.JButton calculateBTN;
    private javax.swing.JRadioButton campaignRB;
    private javax.swing.ButtonGroup costBGR;
    private javax.swing.JLabel countLBL;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JTextArea displayTA;
    private javax.swing.JButton editBTN;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBTN;
    private javax.swing.JLabel menuLBL;
    private javax.swing.JButton nextBTN;
    private javax.swing.JButton previousBTN;
    private javax.swing.JRadioButton programmeRB;
    private javax.swing.JButton saveBTN;
    private javax.swing.JButton searchBTN;
    private javax.swing.JComboBox<String> searchCB;
    private javax.swing.JLabel searchLBL;
    private javax.swing.JTextField searchTF;
    private javax.swing.JRadioButton subsidyRB;
    // End of variables declaration//GEN-END:variables
}
